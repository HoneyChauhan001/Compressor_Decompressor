package GUI;

import comp_decomp.Compressor;
import comp_decomp.Decompressor;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

public class AppFrame extends JFrame implements ActionListener{

    /* Above Line defines the AppFrame class, which extends JFrame class and Implements the ActionListener Interface */
    JLabel label;
    JButton compressButton;
    JButton decompressButton;

    AppFrame(){
        /*
        this is the constructor of the AppFrame getClass,
        Which sets the default close operation of the window to JFrame.EXIT_ON_CLOSE
        and sets the layout of the window to null, also Comstomizing UI of application
        */

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLayout(null);

        label = new JLabel();
        label.setText("Compressor <---> Decompressor");
        label.setForeground(Color.white);
        label.setHorizontalAlignment(SwingConstants.CENTER);

        JPanel panel = new JPanel();
        panel.add(label);//add the label to panel
        panel.setBackground(Color.BLACK);
        panel.setBounds(20,20,460,20);// set the position and size of the panel
        this.add(panel);//add the panel to the window

        JLabel bottomLabel = new JLabel("@ 2023 Honey Chauhan. All right reserved.");
        bottomLabel.setHorizontalAlignment(SwingConstants.CENTER);
        bottomLabel.setBounds(0,195,500,20);
        bottomLabel.setForeground(Color.white);
        this.add(bottomLabel);// Add the bottom lable to window

        /*
        These three lines create a new JButton object named compressButton, set its text to "Select file to Compress",
         add an ActionListener to it (in this case, the AppFrame class itself),
         and set its position and size on the window using the setBounds() method.
         */

        compressButton = new JButton("Select file to compress");
        compressButton.setBounds(20,120,200,30);
        compressButton.addActionListener(this);//adding action to button
        compressButton.setBackground(Color.GRAY);

        /*
        These three lines create a new JButton object named decompressButton, set its text to "Select file to Decompress",
        add an ActionListener to it (in this case, the AppFrame class itself),
        and set its position and size on the window using the setBounds() method.
        */

        decompressButton = new JButton("Select file to decompress");
        decompressButton.setBounds(260,120,200,30);
        decompressButton.addActionListener(this);//adding action to button
        decompressButton.setBackground(Color.GRAY);


        this.add(compressButton);//adding compressButton to Frame/Window
        this.add(decompressButton);//adding decompressButton to Frame/window

        this.setSize(500,250);// setting size of Frame/window to 500 pixels wide and 250 pixels high
        this.getContentPane().setBackground(Color.BLACK);// setting backGround color of window
        this.setVisible(true);//setting the visibility of Frame/Window to true, making it visible to users

    }


    @Override

    /*
    This is the implementation of the actionPerformed() method from the ActionListener interface.
    This method is called whenever an action event (such as a button click) occurs.
    */

    public void actionPerformed(ActionEvent e){
        if(e.getSource()==compressButton){

            /*
            This checks whether the action event was generated by the compressButton.
            If so, it proceeds to the next block of code.
             */

            /*
            A new JFileChooser object is created,
            and its showSaveDialog() method is called to display a "Save" dialog box for the user
            to select a file to compress.
            The method returns an integer value that represents the user's response, such as whether they clicked "Save" or "Cancel".
             */

            JFileChooser fileChooser = new JFileChooser();
            int response = fileChooser.showSaveDialog(null);

            if(response == JFileChooser.APPROVE_OPTION){
                /*
                This block of code is executed if the user clicked the "Save" button in the file dialog box.
                */
                File file = new File(fileChooser.getSelectedFile().getAbsolutePath());
                /*
                This retrieves the selected file's path using getSelectedFile() method and creates a new File object from it.
                The File object represents the file that will be compressed.
                 */
                System.out.print(file);//print the file path on the console
                 try{
                     Compressor.method(file);//using Compressor class method to compress the file
                 }
                 catch(Exception ee){
                     JOptionPane.showMessageDialog(null,ee.toString());//Exception output
                 }
            }
        }

        if(e.getSource() == decompressButton){
            /*
            This checks whether the action event was generated by the decompressButton.
            If so, it proceeds to the next block of code.
             */

            /*
            A new JFileChooser object is created,
            and its showSaveDialog() method is called to display a "Save" dialog box for the user
            to select a file to decompress.
            The method returns an integer value that represents the user's response, such as whether they clicked "Save" or "Cancel".
             */

            JFileChooser fileChooser = new JFileChooser();//open file chooser window of user to choose file
            int response = fileChooser.showSaveDialog(null);//show save dialog

            if(response == JFileChooser.APPROVE_OPTION){
                /*
                This block of code is executed if the user clicked the "Save" button in the file dialog box.
                */

                File file = new File(fileChooser.getSelectedFile().getAbsolutePath());
                /*
                This retrieves the selected file's path using getSelectedFile() method and creates a new File object from it.
                The File object represents the file that will be decompressed.
                 */
                System.out.print(file);//print the file path on the console
                try{
                    Decompressor.method(file);//using Decompressor class method to decompress the file
                }
                catch(Exception ee){
                    JOptionPane.showMessageDialog(null,ee.toString());//Exception output
                }
            }
        }

    }
}
